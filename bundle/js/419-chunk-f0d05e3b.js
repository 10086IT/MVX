"use strict";(self.webpackChunkusersores=self.webpackChunkusersores||[]).push([[419],{62419:function(n,e,r){r.r(e),r.d(e,{default:function(){return p}});r(41539),r(12419);var t=r(15671),s=r(43144),o=r(79340),i=r(82963),a=r(61120),c=r(67294),l=r(36112);function u(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var r,t=(0,a.Z)(n);if(e){var s=(0,a.Z)(this).constructor;r=Reflect.construct(t,arguments,s)}else r=t.apply(this,arguments);return(0,i.Z)(this,r)}}var p=function(n){(0,o.Z)(r,n);var e=u(r);function r(){return(0,t.Z)(this,r),e.apply(this,arguments)}return(0,s.Z)(r,[{key:"render",value:function(){return c.createElement(l.v5,null,"# webpack 笔记\n```javascript\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst path = require('path');\n\nconst isPrd = 'production' === process.env.NODE_ENV;\nconst CopyPlugin = require(\"copy-webpack-plugin\");\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst TerserPlugin = require(\"terser-webpack-plugin\");\nconst os = require('os');\nconst currentCpuLength = os.cpus().length;\nconst CssMinimizerPlugin = require(\"css-minimizer-webpack-plugin\");\nmodule.exports = {\n    target: ['web', 'es5'],\n    entry: ['./src/index.js'],\n    output: {\n        filename: \"js/[name].[contenthash:4].js\",// 输出文件名\n        path: path.resolve(__dirname, './bundle'),// 输出路径\n        clean: true, // 清除上次输出目录\n        // chunkFilename: 'js/[name].[contenthash:6].chunk.js',\n        publicPath:  isPrd? './' : 'auto'\n        // 静态html 目录 ’/‘ // 支持\n        // nigix代理 './' 支持\n        // prd './' 错误\n    },\n    module: {\n        rules: [\n            {\n                test: /\\.(js|jsx)$/,\n                exclude: /node_modules/,\n                use: [\n                    isPrd ? false: {\n                        loader: \"thread-loader\",\n                        // 有同样配置的 loader 会共享一个 worker 池\n                        options: {\n                            // 产生的 worker 的数量，默认是 (cpu 核心数 - 1)，或者，\n                            // 在 require('os').cpus() 是 undefined 时回退至 1\n                            workers: currentCpuLength,\n                        },\n                    },\n                    {\n                        loader: 'babel-loader',\n                        options: {\n                            cacheDirectory: true,\n                            cacheCompression: isPrd,\n                        }\n                    },\n                    isPrd? false:  'eslint-loader'\n                ].filter(Boolean)\n            },\n            {\n                test: /\\.(png|jp(e)?g|gif|svg|webp)$/,\n                type: 'asset/resource',\n                generator: {\n                    filename: 'images/[name][ext]',\n                },\n            },\n            {\n                test: /\\.(md|MD)$/,\n                use: ['raw-loader']\n            },\n            {\n                test: /\\.(css|less)$/,\n                use: [\n                    isPrd ? MiniCssExtractPlugin.loader : 'style-loader',\n                    {\n                        loader: 'css-loader',\n                        options: {\n                            importLoaders: 2,\n                        }\n                    },\n                    'postcss-loader',\n                    'less-loader',\n                ]\n            }\n        ]\n    },\n    plugins: [\n        new CopyPlugin({\n            patterns: [\n                {\n                    from: path.resolve(__dirname, './public/favicon.ico'),\n                    to: path.resolve(__dirname, './bundle/favicon.ico')\n                }\n            ],\n        }),\n        new HtmlWebpackPlugin({\n            template: './public/index.html', // 源html\n            filename: 'index.html', // 输出名\n            inject: 'body', // script位置\n            scriptLoading: 'blocking', // 异步加载js\n        }),\n        isPrd && new MiniCssExtractPlugin({\n            filename: 'css/[name].css',\n            chunkFilename: 'css/[name].chunk.css'\n        })\n    ].filter(Boolean),\n    mode: isPrd ? 'production' : 'development' ,\n    resolve: {\n        extensions: ['.js', '.jsx', '.json'],\n        alias: {\n            '@pages': path.resolve(__dirname, './src/pages'),\n            '@components': path.resolve(__dirname, './src/components'),\n            '@config': path.resolve(__dirname, './src/config')\n        }\n    },\n    devServer: {\n        // host: '0.0.0.0',\n        host: '127.0.0.1',\n        hot: true,\n        port: 8088,\n        open: true,\n        historyApiFallback: true,\n        https: false,\n        proxy: {\n            '/api': {\n              target: 'http://127.0.0.1:80', // Server\n              changeOrigin: true,\n              pathRewrite: {'^/api': ''}\n            },\n          }\n    },\n    devtool: isPrd ? false : 'inline-source-map',\n    performance: false,\n    optimization: {\n        minimize: isPrd,\n        minimizer: [new TerserPlugin({\n            test: /\\.(js|jsx)$/i,\n            parallel: true, //多进程\n            terserOptions: {\n                output: { comments: false, },\n                compress: {\n                    // drop_console: true //console删除\n                }\n            },\n            extractComments: false, // 剥离注释\n        }),\n\n        new CssMinimizerPlugin(),\n        ],\n        splitChunks: {\n            chunks: 'all',\n             cacheGroups: {\n                vendors: {\n                    test: /[\\\\/]node_modules[\\\\/]/,\n                    priority: -10,\n                    name: 'vendors',\n                },\n            },\n        },\n        runtimeChunk: {\n            name: entryPort => `runtime~${entryPort.name}`\n        }\n    },\n}\n```")}}]),r}(c.Component)}}]);